/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,n)=>{"use strict";n.r(t);var r=n("./src/js/data/config.js"),a=n("./src/js/utils/detector.js"),o=n("./src/js/app/main.js");n("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),r.default.isDev=!0,function(){if(a.default.webgl){var e=document.getElementById("appContainer");new o.default(e)}else a.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),a=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.domElement.width,i=t.domElement.height;this.threeCamera=new r.PerspectiveCamera(a.default.camera.fov,o/i,a.default.camera.near,a.default.camera.far),this.threeCamera.position.set(a.default.camera.posX,a.default.camera.posY,a.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return n.updateSize(t)}),!1)}var t,n,i;return t=e,(n=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&o(t.prototype,n),i&&o(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/controls.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/three/build/three.module.js"),a=n("./src/js/utils/orbitControls.js"),o=n.n(a),i=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=new(o())(r);this.threeControls=new a(t,n),this.init()}var t,n,a;return t=e,(n=[{key:"init",value:function(){this.threeControls.target.set(i.default.controls.target.x,i.default.controls.target.y,i.default.controls.target.z),this.threeControls.autoRotate=i.default.controls.autoRotate,this.threeControls.autoRotateSpeed=i.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=i.default.controls.rotateSpeed,this.threeControls.zoomSpeed=i.default.controls.zoomSpeed,this.threeControls.minDistance=i.default.controls.minDistance,this.threeControls.maxDistance=i.default.controls.maxDistance,this.threeControls.minPolarAngle=i.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=i.default.controls.maxPolarAngle,this.threeControls.enableDamping=i.default.controls.enableDamping,this.threeControls.enableZoom=i.default.controls.enableZoom,this.threeControls.dampingFactor=i.default.controls.dampingFactor}}])&&s(t.prototype,n),a&&s(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/geometry.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./node_modules/three/build/three.module.js"),a=n("./src/js/app/components/material.js"),o=n("./src/js/data/config.js");function i(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,n,s;return t=e,n=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new r.PlaneGeometry(e,n,a,o)}:"sphere"===e?function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new r.SphereGeometry(e,n,a)}:void 0}},{key:"place",value:function(e,t){var n,s,l=new a.default(15658734).standard,u=new r.Mesh(this.geo,l);(n=u.position).set.apply(n,i(e)),(s=u.rotation).set.apply(s,i(t)),o.default.shadow.enabled&&(u.receiveShadow=!0),this.scene.add(u)}}],n&&l(t.prototype,n),s&&l(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/light.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),a=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,n,i;return t=e,(n=[{key:"init",value:function(){this.ambientLight=new r.AmbientLight(a.default.ambientLight.color),this.ambientLight.visible=a.default.ambientLight.enabled,this.pointLight=new r.PointLight(a.default.pointLight.color,a.default.pointLight.intensity,a.default.pointLight.distance),this.pointLight.position.set(a.default.pointLight.x,a.default.pointLight.y,a.default.pointLight.z),this.pointLight.visible=a.default.pointLight.enabled,this.directionalLight=new r.DirectionalLight(a.default.directionalLight.color,a.default.directionalLight.intensity),this.directionalLight.position.set(a.default.directionalLight.x,a.default.directionalLight.y,a.default.directionalLight.z),this.directionalLight.visible=a.default.directionalLight.enabled,this.directionalLight.castShadow=a.default.shadow.enabled,this.directionalLight.shadow.bias=a.default.shadow.bias,this.directionalLight.shadow.camera.near=a.default.shadow.near,this.directionalLight.shadow.camera.far=a.default.shadow.far,this.directionalLight.shadow.camera.left=a.default.shadow.left,this.directionalLight.shadow.camera.right=a.default.shadow.right,this.directionalLight.shadow.camera.top=a.default.shadow.top,this.directionalLight.shadow.camera.bottom=a.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=a.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=a.default.shadow.mapHeight,a.default.isDev&&(this.directionalLightHelper=new r.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=a.default.shadow.helperEnabled),this.hemiLight=new r.HemisphereLight(a.default.hemiLight.color,a.default.hemiLight.groundColor,a.default.hemiLight.intensity),this.hemiLight.position.set(a.default.hemiLight.x,a.default.hemiLight.y,a.default.hemiLight.z),this.hemiLight.visible=a.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),a.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&o(t.prototype,n),i&&o(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/material.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js");function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var i=o((function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new r.MeshBasicMaterial({color:t,side:r.DoubleSide}),this.standard=new r.MeshStandardMaterial({color:t,shading:r.FlatShading,roughness:1,metalness:0,side:r.DoubleSide}),this.wire=new r.MeshBasicMaterial({wireframe:!0})}))},"./src/js/app/components/renderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),a=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=n,this.threeRenderer=new r.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),n.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=r.PCFSoftShadowMap,a.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return o.updateSize()}),!1),window.addEventListener("resize",(function(){return o.updateSize()}),!1)}var t,n,i;return t=e,(n=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&o(t.prototype,n),i&&o(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/flowers/Flowers.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/three/build/three.module.js"),a=n("./node_modules/random/dist/cjs/index.js"),o=n.n(a),i=(n("./src/js/app/components/material.js"),n("./src/js/utils/helpers.js"),n("./src/js/utils/bufferGeometryUtils.js"));n("./src/js/app/loaders/GLTFLoader.js"),n("./src/js/data/config.js");function s(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.obj=null,this.ref=null,this.normalRandom=o().normal(.5,.1),this.uniformRandom=o().uniform()}var t,n,a;return t=e,n=[{key:"load",value:function(){var e=new r.Group;e.scale.multiplyScalar(20);var t=this.uniformRandom(),n=this.drawFlowers(t,4,20);e.add(n),this.scene.add(e),this.ref=e}},{key:"getMaterial",value:function(e){return new r.MeshStandardMaterial({color:e,metalness:0,roughness:.9,side:r.DoubleSide})}},{key:"getPaddelColor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=[new r.Color(1,0,0),new r.Color(1,.5,0),new r.Color(1,0,.5),new r.Color(.5,.5,0),new r.Color(.5,0,.5),new r.Color(.2,.3,.3)],n=Math.floor(e*t.length%t.length);return t[n]}},{key:"getStamColor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=[new r.Color(.2,.6,0),new r.Color(.2,.8,.6),new r.Color(.1,.6,0),new r.Color(.1,.8,.2),new r.Color(.1,.7,0)],n=Math.floor(e*t.length%t.length);return t[n]}},{key:"getLeaveColor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=[new r.Color(.2,1,0),new r.Color(.2,.8,.1),new r.Color(.2,1,0),new r.Color(.1,.8,.2),new r.Color(.2,.7,0)],n=Math.floor(e*t.length%t.length);return t[n]}},{key:"getHeadColor",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=[new r.Color(.5,.5,0),new r.Color(.9,1,.1),new r.Color(.8,.7,0)],n=Math.floor(e*t.length%t.length);return t[n]}},{key:"drawFlowers",value:function(e,t,n){var a=[],o=t*n*.3;console.log({flowerDiversity:o});for(var i=0;i<o;i++){var s=this.uniformRandom();a.push(this.drawFlower(s))}a.sort((function(e,t){var n=(new r.Box3).setFromObject(e),a=(new r.Box3).setFromObject(t);return n.max.y-a.max.y}));for(var l=new r.Group,u=-.9;u<.9;u+=.3)for(var c=-.9;c<.9;c+=.3){var d=1-Math.max(Math.abs(u),Math.abs(c)),h=a[Math.floor(d*a.length)%a.length].clone();h.rotateY(this.uniformRandom()*Math.PI),h.translateX(u*t/20+(this.uniformRandom()-.5)),h.translateZ(c*t/20+(this.uniformRandom()-.5)),h.rotateX(c*Math.PI/3),h.rotateZ(-u*Math.PI/3),h.scale.multiplyScalar(d*(.6*this.uniformRandom())+.4),l.add(h)}return l}},{key:"drawFlower",value:function(e){var t=new r.Group,n=this.drawStam(e);t.add(n);var a=this.drawLeave(e);return a.scale.multiplyScalar(2),a.scale.y=1.5*a.scale.y,a.scale.y=.7*a.scale.x,a.scale.z=.7*a.scale.z,t.add(a),t}},{key:"drawStam",value:function(e){var t=new r.Group,n=new r.Vector3(0,0,0),a=new r.Vector3(2*(this.normalRandom()-1)*.4,3*this.normalRandom(),2*(this.normalRandom()-1)*.4),o=new r.Vector3(2*(this.normalRandom()-1)*.4,1+3*e,2*(this.normalRandom()-1)*.4),i=new r.QuadraticBezierCurve3(n,a,o),s=new r.TubeBufferGeometry(i,6,.01+.01*e,4,!1),l=this.getMaterial(this.getStamColor(e)),u=new r.Mesh(s,l);t.add(u);var c=t.up,d=new r.Group,h=.2+.5*this.normalRandom(),m=i.getPointAt(h);d.position.set(m.x,m.y,m.z);var f=i.getTangent(h).normalize(),p=new r.Vector3;p.crossVectors(c,f).normalize();var g=Math.acos(c.dot(f));d.quaternion.setFromAxisAngle(p,g);var v=this.drawLeaveStam(e);if(d.add(v),e<.5){var b=v.clone();b.rotateY(Math.PI+this.normalRandom()),b.scale.multiplyScalar(1+.4*this.normalRandom()),d.add(b)}t.add(d);var y=new r.Group;y.position.set(o.x,o.y,o.z);var w=i.getTangent(1).normalize(),L=new r.Vector3;L.crossVectors(c,w).normalize();var M=Math.acos(c.dot(w));y.quaternion.setFromAxisAngle(L,M);var E=this.drawHead(e);return y.add(E),t.add(y),t}},{key:"drawLeaveStam",value:function(e){var t=new r.Group,n=new r.Vector3(0,0,0),a=new r.Vector3(.05*this.normalRandom(),.05*this.normalRandom(),.05*this.normalRandom()),o=new r.Vector3(.1*this.normalRandom(),.2*e,.1*this.normalRandom()),i=new r.QuadraticBezierCurve3(n,a,o),s=new r.TubeBufferGeometry(i,3,.02*e,4,!1),l=this.getMaterial(this.getStamColor(e)),u=new r.Mesh(s,l);t.add(u);var c=new r.Group;c.position.set(o.x,o.y,o.z);var d=i.getTangent(1).normalize(),h=new r.Vector3;h.crossVectors(c.up,d).normalize();var m=Math.acos(c.up.dot(d));c.quaternion.setFromAxisAngle(h,m);var f=this.drawLeave(e);return f.rotateY(5*Math.PI/4),f.scale.multiplyScalar(1+2*e),c.add(f),t.add(c),t}},{key:"drawLeave",value:function(e){var t,n=this.normalRandom(),a=this.normalRandom(),o=this.normalRandom(),i=new r.Vector3(0,0,0),l=new r.Vector3(.4*n,.5*a,.4*o),u=new r.Vector3(0,(e+a)/2,0),c=i.clone(),d=new r.Vector3(-.5*a,.5*o,.5*n),h=u.clone(),m=new r.QuadraticBezierCurve3(i,l,u),f=new r.QuadraticBezierCurve3(c,d,h),p=m.getPoints(4),g=f.getPoints(4);t=[].concat(s(p),s(g)).map((function(e){return[e.x,e.y,e.z]})).flat();for(var v=[],b=0;b<4;b++)v.push(b),v.push(b+4),v.push(b+1+4),v.push(b),v.push(b+1+4),v.push(b+1);var y=new r.BufferGeometry,w=new Float32Array(t);y.setAttribute("position",new r.BufferAttribute(w,3)),y.setIndex(v),y.computeVertexNormals();var L=this.getMaterial(this.getLeaveColor(e)),M=new r.Mesh(y,L),E=l.clone().add(d);return M.lookAt(E),M}},{key:"drawHead",value:function(e){var t=new r.Group,n=.1*e,a=new r.DodecahedronBufferGeometry(n),o=this.getMaterial(this.getLeaveColor(e)),s=new r.Mesh(a,o);s.translateY(-n),t.add(s);var l=4+10*this.normalRandom(),u=this.drawLeave(e).geometry;u.rotateX(3*Math.PI/5);for(var c=u.clone(),d=0;d<l;d++){var h=u.clone();h.rotateY(Math.PI/l*d*2),c=i.BufferGeometryUtils.mergeBufferGeometries([c,h])}var m=this.getMaterial(this.getLeaveColor(e)),f=new r.Mesh(c,m);f.scale.multiplyScalar(.8*e),t.add(f);var p=new r.Group;p.translateY(n);var g=new r.DodecahedronBufferGeometry(n),v=this.getMaterial(this.getHeadColor(e)),b=new r.Mesh(g,v);p.add(b),p.translateY(-n);var y=this.drawPaddles(e);return p.add(y),t.add(p),t}},{key:"drawPaddles",value:function(e){var t,n=new r.Group,a=this.uniformRandom(),o=this.uniformRandom(),l=this.uniformRandom(),u=new r.Vector3(0,0,0),c=new r.Vector3(.4*l+.2,.5*a,.4*l+.2),d=new r.Vector3(0,o+.2,0),h=u.clone(),m=new r.Vector3(-(.4*l+.2),.5*a,.4*l+.2),f=d.clone(),p=new r.QuadraticBezierCurve3(u,c,d),g=new r.QuadraticBezierCurve3(h,m,f),v=p.getPoints(4),b=g.getPoints(4);t=[].concat(s(v),s(b)).map((function(e){return[e.x,e.y,e.z]})).flat();for(var y=[],w=0;w<4;w++)y.push(w),y.push(w+4),y.push(w+1+4),y.push(w),y.push(w+1+4),y.push(w+1);var L=new r.BufferGeometry,M=new Float32Array(t);L.setAttribute("position",new r.BufferAttribute(M,3)),L.setIndex(y),L.computeVertexNormals(),L.rotateX(Math.PI/3);for(var E=5+8*this.uniformRandom(),R=L,x=1;x<E;x++){var T=L.clone();T.rotateY(Math.PI/E*x*2),R=i.BufferGeometryUtils.mergeBufferGeometries([R,T])}var S=this.getMaterial(this.getPaddelColor(e)),A=new r.Mesh(R,S);return n.add(A),n}},{key:"unload",value:function(){this.scene.remove(this.ref)}}],n&&u(t.prototype,n),a&&u(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/meshHelper.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/three/build/three.module.js"),a=n("./src/js/app/helpers/vertexNormalsHelper.js");function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=n,this.scene=t;var o=new r.WireframeGeometry(this.mesh.geometry);this.wireLine=new r.LineSegments(o),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new r.EdgesGeometry(this.mesh.geometry);this.edgesLine=new r.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new a.VertexNormalsHelper(this.mesh,2),this.boxHelper=new r.BoxHelper(this.mesh)}var t,n,i;return t=e,(n=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&o(t.prototype,n),i&&o(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/stats.js":(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,o,i,s;n.r(t),n.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,n,l;return t=e,l=[{key:"start",value:function(){a("frame").start(),i.start(),a("rAF").tick(),a("FPS").frame(),a("render").start()}},{key:"end",value:function(){a("render").end(),a("frame").end(),a("rStats").start(),a().update(),a("rStats").end()}}],(n=[{key:"setUp",value:function(){o=new BrowserStats,i=new glStats,s=new threeStats(this.renderer.threeRenderer),a=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[o,s]})}}])&&r(t.prototype,n),l&&r(t,l),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{VertexNormalsHelper:()=>l});var r=n("./node_modules/three/build/three.module.js"),a=new r.Vector3,o=new r.Vector3,i=new r.Matrix3,s=["a","b","c"];function l(e,t,n){this.object=e,this.size=void 0!==t?t:.1;var a=void 0!==n?n:16711680,o=0,i=this.object.geometry;i&&i.isGeometry?o=3*i.faces.length:i&&i.isBufferGeometry&&(o=i.attributes.normal.count);var s=new r.BufferGeometry,l=new r.Float32BufferAttribute(2*o*3,3);s.setAttribute("position",l),r.LineSegments.call(this,s,new r.LineBasicMaterial({color:a,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(r.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,n=this.geometry.attributes.position,r=this.object.geometry;if(r&&r.isGeometry){var l=r.vertices,u=r.faces;e=0;for(var c=0,d=u.length;c<d;c++)for(var h=u[c],m=0,f=h.vertexNormals.length;m<f;m++){var p=l[h[s[m]]],g=h.vertexNormals[m];a.copy(p).applyMatrix4(t),o.copy(g).applyMatrix3(i).normalize().multiplyScalar(this.size).add(a),n.setXYZ(e,a.x,a.y,a.z),e+=1,n.setXYZ(e,o.x,o.y,o.z),e+=1}}else if(r&&r.isBufferGeometry){var v=r.attributes.position,b=r.attributes.normal;e=0;for(var y=0,w=v.count;y<w;y++)a.set(v.getX(y),v.getY(y),v.getZ(y)).applyMatrix4(t),o.set(b.getX(y),b.getY(y),b.getZ(y)),o.applyMatrix3(i).normalize().multiplyScalar(this.size).add(a),n.setXYZ(e,a.x,a.y,a.z),e+=1,n.setXYZ(e,o.x,o.y,o.z),e+=1}n.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{GLTFLoader:()=>o});var r=n("./node_modules/three/build/three.module.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}var o=function(){function e(e){r.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(r.Loader.prototype),{constructor:e,load:function(e,t,n,a){var o,i=this;o=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:r.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var s=function(t){a?a(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new r.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(n){try{i.parse(n,o,(function(n){t(n),i.manager.itemEnd(e)}),s)}catch(e){s(e)}}),n,s)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,a,c){var d,p={};if("string"==typeof e)d=e;else if(r.LoaderUtils.decodeText(new Uint8Array(e,0,4))===u){try{p[n.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(c&&c(e))}d=p[n.KHR_BINARY_GLTF].content}else d=r.LoaderUtils.decodeText(new Uint8Array(e));var b=JSON.parse(d);if(void 0===b.asset||b.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(b.extensionsUsed)for(var y=0;y<b.extensionsUsed.length;++y){var w=b.extensionsUsed[y],L=b.extensionsRequired||[];switch(w){case n.KHR_LIGHTS_PUNCTUAL:p[w]=new i(b);break;case n.KHR_MATERIALS_CLEARCOAT:p[w]=new l;break;case n.KHR_MATERIALS_UNLIT:p[w]=new s;break;case n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:p[w]=new g;break;case n.KHR_DRACO_MESH_COMPRESSION:p[w]=new m(b,this.dracoLoader);break;case n.MSFT_TEXTURE_DDS:p[w]=new o(this.ddsLoader);break;case n.KHR_TEXTURE_TRANSFORM:p[w]=new f;break;case n.KHR_MESH_QUANTIZATION:p[w]=new v;break;default:L.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new N(b,p,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(a,c)}}});var n={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function o(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=n.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=n.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[n.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function s(){this.name=n.KHR_MATERIALS_UNLIT}function l(){this.name=n.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,n=this.lightDefs[e],a=new r.Color(16777215);void 0!==n.color&&a.fromArray(n.color);var o=void 0!==n.range?n.range:0;switch(n.type){case"directional":(t=new r.DirectionalLight(a)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new r.PointLight(a)).distance=o;break;case"spot":(t=new r.SpotLight(a)).distance=o,n.spot=n.spot||{},n.spot.innerConeAngle=void 0!==n.spot.innerConeAngle?n.spot.innerConeAngle:0,n.spot.outerConeAngle=void 0!==n.spot.outerConeAngle?n.spot.outerConeAngle:Math.PI/4,t.angle=n.spot.outerConeAngle,t.penumbra=1-n.spot.innerConeAngle/n.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+n.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==n.intensity&&(t.intensity=n.intensity),t.name=n.name||"light_"+e,Promise.resolve(t)},s.prototype.getMaterialType=function(){return r.MeshBasicMaterial},s.prototype.extendParams=function(e,t,n){var a=[];e.color=new r.Color(1,1,1),e.opacity=1;var o=t.pbrMetallicRoughness;if(o){if(Array.isArray(o.baseColorFactor)){var i=o.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==o.baseColorTexture&&a.push(n.assignTexture(e,"map",o.baseColorTexture))}return Promise.all(a)},l.prototype.getMaterialType=function(){return r.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,n){var a=[],o=t.extensions[this.name];if(void 0!==o.clearcoatFactor&&(e.clearcoat=o.clearcoatFactor),void 0!==o.clearcoatTexture&&a.push(n.assignTexture(e,"clearcoatMap",o.clearcoatTexture)),void 0!==o.clearcoatRoughnessFactor&&(e.clearcoatRoughness=o.clearcoatRoughnessFactor),void 0!==o.clearcoatRoughnessTexture&&a.push(n.assignTexture(e,"clearcoatRoughnessMap",o.clearcoatRoughnessTexture)),void 0!==o.clearcoatNormalTexture&&(a.push(n.assignTexture(e,"clearcoatNormalMap",o.clearcoatNormalTexture)),void 0!==o.clearcoatNormalTexture.scale)){var i=o.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new r.Vector2(i,i)}return Promise.all(a)};var u="glTF",c=1313821514,d=5130562;function h(e){this.name=n.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:r.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var a=new DataView(e,12),o=0;o<a.byteLength;){var i=a.getUint32(o,!0);o+=4;var s=a.getUint32(o,!0);if(o+=4,s===c){var l=new Uint8Array(e,12+o,i);this.content=r.LoaderUtils.decodeText(l)}else if(s===d){var h=12+o;this.body=e.slice(h,h+i)}o+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function m(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=n.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function f(){this.name=n.KHR_TEXTURE_TRANSFORM}function p(e){r.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),n=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),a=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),o=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),s={specular:{value:(new r.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=s,this.onBeforeCompile=function(e){for(var r in s)e.uniforms[r]=s[r];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",o),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return s.specular.value},set:function(e){s.specular.value=e}},specularMap:{get:function(){return s.specularMap.value},set:function(e){s.specularMap.value=e}},glossiness:{get:function(){return s.glossiness.value},set:function(e){s.glossiness.value=e}},glossinessMap:{get:function(){return s.glossinessMap.value},set:function(e){s.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return p},extendParams:function(e,t,n){var a=t.extensions[this.name];e.color=new r.Color(1,1,1),e.opacity=1;var o=[];if(Array.isArray(a.diffuseFactor)){var i=a.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==a.diffuseTexture&&o.push(n.assignTexture(e,"map",a.diffuseTexture)),e.emissive=new r.Color(0,0,0),e.glossiness=void 0!==a.glossinessFactor?a.glossinessFactor:1,e.specular=new r.Color(1,1,1),Array.isArray(a.specularFactor)&&e.specular.fromArray(a.specularFactor),void 0!==a.specularGlossinessTexture){var s=a.specularGlossinessTexture;o.push(n.assignTexture(e,"glossinessMap",s)),o.push(n.assignTexture(e,"specularMap",s))}return Promise.all(o)},createMaterial:function(e){var t=new p(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=r.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=n.KHR_MESH_QUANTIZATION}function b(e,t,n,a){r.Interpolant.call(this,e,t,n,a)}m.prototype.decodePrimitive=function(e,t){var n=this.json,r=this.dracoLoader,a=e.extensions[this.name].bufferView,o=e.extensions[this.name].attributes,i={},s={},l={};for(var u in o){var c=j[u]||u.toLowerCase();i[c]=o[u]}for(u in e.attributes){c=j[u]||u.toLowerCase();if(void 0!==o[u]){var d=n.accessors[e.attributes[u]],h=T[d.componentType];l[c]=h,s[c]=!0===d.normalized}}return t.getDependency("bufferView",a).then((function(e){return new Promise((function(t){r.decodeDracoFile(e,(function(e){for(var n in e.attributes){var r=e.attributes[n],a=s[n];void 0!==a&&(r.normalized=a)}t(e)}),i,l)}))}))},f.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},p.prototype=Object.create(r.MeshStandardMaterial.prototype),p.prototype.constructor=p,p.prototype.copy=function(e){return r.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},b.prototype=Object.create(r.Interpolant.prototype),b.prototype.constructor=b,b.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,a=e*r*3+r,o=0;o!==r;o++)t[o]=n[a+o];return t},b.prototype.beforeStart_=b.prototype.copySampleValue_,b.prototype.afterEnd_=b.prototype.copySampleValue_,b.prototype.interpolate_=function(e,t,n,r){for(var a=this.resultBuffer,o=this.sampleValues,i=this.valueSize,s=2*i,l=3*i,u=r-t,c=(n-t)/u,d=c*c,h=d*c,m=e*l,f=m-l,p=-2*h+3*d,g=h-d,v=1-p,b=g-d+c,y=0;y!==i;y++){var w=o[f+y+i],L=o[f+y+s]*u,M=o[m+y+i],E=o[m+y]*u;a[y]=v*w+b*L+p*M+g*E}return a};var y=0,w=1,L=2,M=3,E=4,R=5,x=6,T={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},S={9728:r.NearestFilter,9729:r.LinearFilter,9984:r.NearestMipmapNearestFilter,9985:r.LinearMipmapNearestFilter,9986:r.NearestMipmapLinearFilter,9987:r.LinearMipmapLinearFilter},A={33071:r.ClampToEdgeWrapping,33648:r.MirroredRepeatWrapping,10497:r.RepeatWrapping},C={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},j={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},P={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},_={CUBICSPLINE:void 0,LINEAR:r.InterpolateLinear,STEP:r.InterpolateDiscrete},O="OPAQUE",F="MASK",k="BLEND",I={"image/png":r.RGBAFormat,"image/jpeg":r.RGBFormat};function H(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function U(e,t,n){for(var r in n.extensions)void 0===e[r]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[r]=n.extensions[r])}function D(e,t){void 0!==t.extras&&("object"===a(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function G(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var n=0,r=t.weights.length;n<r;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){var a=t.extras.targetNames;if(e.morphTargetInfluences.length===a.length){e.morphTargetDictionary={};for(n=0,r=a.length;n<r;n++)e.morphTargetDictionary[a[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){for(var t="",n=Object.keys(e).sort(),r=0,a=n.length;r<a;r++)t+=n[r]+":"+e[n[r]]+";";return t}function N(e,n,a){this.json=e||{},this.extensions=n||{},this.options=a||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new r.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new r.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,n){var a=t.attributes,o=[];function i(t,r){return n.getDependency("accessor",t).then((function(t){e.setAttribute(r,t)}))}for(var s in a){var l=j[s]||s.toLowerCase();l in e.attributes||o.push(i(a[s],l))}if(void 0!==t.indices&&!e.index){var u=n.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));o.push(u)}return D(e,t),function(e,t,n){var a=t.attributes,o=new r.Box3;if(void 0!==a.POSITION){var i=(m=n.json.accessors[a.POSITION]).min,s=m.max;if(void 0!==i&&void 0!==s){o.set(new r.Vector3(i[0],i[1],i[2]),new r.Vector3(s[0],s[1],s[2]));var l=t.targets;if(void 0!==l){for(var u=new r.Vector3,c=new r.Vector3,d=0,h=l.length;d<h;d++){var m,f=l[d];if(void 0!==f.POSITION)i=(m=n.json.accessors[f.POSITION]).min,s=m.max,void 0!==i&&void 0!==s?(c.setX(Math.max(Math.abs(i[0]),Math.abs(s[0]))),c.setY(Math.max(Math.abs(i[1]),Math.abs(s[1]))),c.setZ(Math.max(Math.abs(i[2]),Math.abs(s[2]))),u.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}o.expandByVector(u)}e.boundingBox=o;var p=new r.Sphere;o.getCenter(p.center),p.radius=o.min.distanceTo(o.max)/2,e.boundingSphere=p}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,n),Promise.all(o).then((function(){return void 0!==t.targets?function(e,t,n){for(var r=!1,a=!1,o=0,i=t.length;o<i&&(void 0!==(u=t[o]).POSITION&&(r=!0),void 0!==u.NORMAL&&(a=!0),!r||!a);o++);if(!r&&!a)return Promise.resolve(e);var s=[],l=[];for(o=0,i=t.length;o<i;o++){var u=t[o];if(r){var c=void 0!==u.POSITION?n.getDependency("accessor",u.POSITION):e.attributes.position;s.push(c)}a&&(c=void 0!==u.NORMAL?n.getDependency("accessor",u.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(s),Promise.all(l)]).then((function(t){var n=t[0],o=t[1];return r&&(e.morphAttributes.position=n),a&&(e.morphAttributes.normal=o),e.morphTargetsRelative=!0,e}))}(e,t.targets,n):e}))}function V(e,t){var n=e.getIndex();if(null===n){var a=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<o.count;i++)a.push(i);e.setIndex(a),n=e.getIndex()}var s=n.count-2,l=[];if(t===r.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==s&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u}return N.prototype.parse=function(e,t){var n=this,r=this.json,a=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var o={scene:t[0][r.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:r.asset,parser:n,userData:{}};U(a,o,r),D(o,r),e(o)})).catch(t)},N.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[],r={},a={},o=0,i=t.length;o<i;o++)for(var s=t[o].joints,l=0,u=s.length;l<u;l++)e[s[l]].isBone=!0;for(var c=0,d=e.length;c<d;c++){var h=e[c];void 0!==h.mesh&&(void 0===r[h.mesh]&&(r[h.mesh]=a[h.mesh]=0),r[h.mesh]++,void 0!==h.skin&&(n[h.mesh].isSkinnedMesh=!0))}this.json.meshReferences=r,this.json.meshUses=a},N.prototype.getDependency=function(e,t){var r=e+":"+t,a=this.cache.get(r);if(!a){switch(e){case"scene":a=this.loadScene(t);break;case"node":a=this.loadNode(t);break;case"mesh":a=this.loadMesh(t);break;case"accessor":a=this.loadAccessor(t);break;case"bufferView":a=this.loadBufferView(t);break;case"buffer":a=this.loadBuffer(t);break;case"material":a=this.loadMaterial(t);break;case"texture":a=this.loadTexture(t);break;case"skin":a=this.loadSkin(t);break;case"animation":a=this.loadAnimation(t);break;case"camera":a=this.loadCamera(t);break;case"light":a=this.extensions[n.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(r,a)}return a},N.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var n=this,r=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(r.map((function(t,r){return n.getDependency(e,r)}))),this.cache.add(e,t)}return t},N.prototype.loadBuffer=function(e){var t=this.json.buffers[e],r=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[n.KHR_BINARY_GLTF].body);var a=this.options;return new Promise((function(e,n){r.load(H(t.uri,a.path),e,void 0,(function(){n(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},N.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var n=t.byteLength||0,r=t.byteOffset||0;return e.slice(r,r+n)}))},N.prototype.loadAccessor=function(e){var t=this,n=this.json,a=this.json.accessors[e];if(void 0===a.bufferView&&void 0===a.sparse)return Promise.resolve(null);var o=[];return void 0!==a.bufferView?o.push(this.getDependency("bufferView",a.bufferView)):o.push(null),void 0!==a.sparse&&(o.push(this.getDependency("bufferView",a.sparse.indices.bufferView)),o.push(this.getDependency("bufferView",a.sparse.values.bufferView))),Promise.all(o).then((function(e){var o,i,s=e[0],l=C[a.type],u=T[a.componentType],c=u.BYTES_PER_ELEMENT,d=c*l,h=a.byteOffset||0,m=void 0!==a.bufferView?n.bufferViews[a.bufferView].byteStride:void 0,f=!0===a.normalized;if(m&&m!==d){var p=Math.floor(h/m),g="InterleavedBuffer:"+a.bufferView+":"+a.componentType+":"+p+":"+a.count,v=t.cache.get(g);v||(o=new u(s,p*m,a.count*m/c),v=new r.InterleavedBuffer(o,m/c),t.cache.add(g,v)),i=new r.InterleavedBufferAttribute(v,l,h%m/c,f)}else o=null===s?new u(a.count*l):new u(s,h,a.count*l),i=new r.BufferAttribute(o,l,f);if(void 0!==a.sparse){var b=C.SCALAR,y=T[a.sparse.indices.componentType],w=a.sparse.indices.byteOffset||0,L=a.sparse.values.byteOffset||0,M=new y(e[1],w,a.sparse.count*b),E=new u(e[2],L,a.sparse.count*l);null!==s&&(i=new r.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var R=0,x=M.length;R<x;R++){var S=M[R];if(i.setX(S,E[R*l]),l>=2&&i.setY(S,E[R*l+1]),l>=3&&i.setZ(S,E[R*l+2]),l>=4&&i.setW(S,E[R*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},N.prototype.loadTexture=function(e){var t,a=this,o=this.json,i=this.options,s=this.textureLoader,l=self.URL||self.webkitURL,u=o.textures[e],c=u.extensions||{},d=(t=c[n.MSFT_TEXTURE_DDS]?o.images[c[n.MSFT_TEXTURE_DDS].source]:o.images[u.source]).uri,h=!1;return void 0!==t.bufferView&&(d=a.getDependency("bufferView",t.bufferView).then((function(e){h=!0;var n=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(n)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=c[n.MSFT_TEXTURE_DDS]?a.extensions[n.MSFT_TEXTURE_DDS].ddsLoader:s),new Promise((function(n,r){t.load(H(e,i.path),n,void 0,r)}))})).then((function(e){!0===h&&l.revokeObjectURL(d),e.flipY=!1,u.name&&(e.name=u.name),t.mimeType in I&&(e.format=I[t.mimeType]);var n=(o.samplers||{})[u.sampler]||{};return e.magFilter=S[n.magFilter]||r.LinearFilter,e.minFilter=S[n.minFilter]||r.LinearMipmapLinearFilter,e.wrapS=A[n.wrapS]||r.RepeatWrapping,e.wrapT=A[n.wrapT]||r.RepeatWrapping,e}))},N.prototype.assignTexture=function(e,t,a){var o=this;return this.getDependency("texture",a.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=r.RGBFormat}if(void 0===a.texCoord||0==a.texCoord||"aoMap"===t&&1==a.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+a.texCoord+" for texture "+t+" not yet supported."),o.extensions[n.KHR_TEXTURE_TRANSFORM]){var s=void 0!==a.extensions?a.extensions[n.KHR_TEXTURE_TRANSFORM]:void 0;s&&(i=o.extensions[n.KHR_TEXTURE_TRANSFORM].extendTexture(i,s))}e[t]=i}))},N.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,a=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,i=void 0===t.attributes.normal,s=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+n.uuid,d=this.cache.get(c);d||(d=new r.PointsMaterial,r.Material.prototype.copy.call(d,n),d.color.copy(n.color),d.map=n.map,d.sizeAttenuation=!1,this.cache.add(c,d)),n=d}else if(e.isLine){c="LineBasicMaterial:"+n.uuid;var h=this.cache.get(c);h||(h=new r.LineBasicMaterial,r.Material.prototype.copy.call(h,n),h.color.copy(n.color),this.cache.add(c,h)),n=h}if(a||o||i||s||l){c="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),s&&(c+="skinning:"),a&&(c+="vertex-tangents:"),o&&(c+="vertex-colors:"),i&&(c+="flat-shading:"),l&&(c+="morph-targets:"),u&&(c+="morph-normals:");var m=this.cache.get(c);m||(m=n.clone(),s&&(m.skinning=!0),a&&(m.vertexTangents=!0),o&&(m.vertexColors=!0),i&&(m.flatShading=!0),l&&(m.morphTargets=!0),u&&(m.morphNormals=!0),this.cache.add(c,m)),n=m}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),n.normalScale&&!a&&(n.normalScale.y=-n.normalScale.y),n.clearcoatNormalScale&&!a&&(n.clearcoatNormalScale.y=-n.clearcoatNormalScale.y),e.material=n},N.prototype.loadMaterial=function(e){var t,a=this,o=this.json,i=this.extensions,s=o.materials[e],l={},u=s.extensions||{},c=[];if(u[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),c.push(d.extendParams(l,s,a))}else if(u[n.KHR_MATERIALS_UNLIT]){var h=i[n.KHR_MATERIALS_UNLIT];t=h.getMaterialType(),c.push(h.extendParams(l,s,a))}else{t=r.MeshStandardMaterial;var m=s.pbrMetallicRoughness||{};if(l.color=new r.Color(1,1,1),l.opacity=1,Array.isArray(m.baseColorFactor)){var f=m.baseColorFactor;l.color.fromArray(f),l.opacity=f[3]}void 0!==m.baseColorTexture&&c.push(a.assignTexture(l,"map",m.baseColorTexture)),l.metalness=void 0!==m.metallicFactor?m.metallicFactor:1,l.roughness=void 0!==m.roughnessFactor?m.roughnessFactor:1,void 0!==m.metallicRoughnessTexture&&(c.push(a.assignTexture(l,"metalnessMap",m.metallicRoughnessTexture)),c.push(a.assignTexture(l,"roughnessMap",m.metallicRoughnessTexture)))}!0===s.doubleSided&&(l.side=r.DoubleSide);var g=s.alphaMode||O;if(g===k?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===F&&(l.alphaTest=void 0!==s.alphaCutoff?s.alphaCutoff:.5)),void 0!==s.normalTexture&&t!==r.MeshBasicMaterial&&(c.push(a.assignTexture(l,"normalMap",s.normalTexture)),l.normalScale=new r.Vector2(1,1),void 0!==s.normalTexture.scale&&l.normalScale.set(s.normalTexture.scale,s.normalTexture.scale)),void 0!==s.occlusionTexture&&t!==r.MeshBasicMaterial&&(c.push(a.assignTexture(l,"aoMap",s.occlusionTexture)),void 0!==s.occlusionTexture.strength&&(l.aoMapIntensity=s.occlusionTexture.strength)),void 0!==s.emissiveFactor&&t!==r.MeshBasicMaterial&&(l.emissive=(new r.Color).fromArray(s.emissiveFactor)),void 0!==s.emissiveTexture&&t!==r.MeshBasicMaterial&&c.push(a.assignTexture(l,"emissiveMap",s.emissiveTexture)),u[n.KHR_MATERIALS_CLEARCOAT]){var v=i[n.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),c.push(v.extendParams(l,{extensions:u},a))}return Promise.all(c).then((function(){var e;return e=t===p?i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),s.name&&(e.name=s.name),e.map&&(e.map.encoding=r.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=r.sRGBEncoding),D(e,s),s.extensions&&U(i,e,s),e}))},N.prototype.loadGeometries=function(e){var t=this,a=this.extensions,o=this.primitiveCache;function i(e){return a[n.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(n){return z(n,e,t)}))}for(var s,l,u=[],c=0,d=e.length;c<d;c++){var h,m=e[c],f=(l=void 0,(l=(s=m).extensions&&s.extensions[n.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+B(l.attributes):s.indices+":"+B(s.attributes)+":"+s.mode),p=o[f];if(p)u.push(p.promise);else h=m.extensions&&m.extensions[n.KHR_DRACO_MESH_COMPRESSION]?i(m):z(new r.BufferGeometry,m,t),o[f]={primitive:m,promise:h},u.push(h)}return Promise.all(u)},N.prototype.loadMesh=function(e){for(var t,n=this,a=this.json.meshes[e],o=a.primitives,i=[],s=0,l=o.length;s<l;s++){var u=void 0===o[s].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new r.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:r.FrontSide})),t.DefaultMaterial):this.getDependency("material",o[s].material);i.push(u)}return i.push(n.loadGeometries(o)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),s=t[t.length-1],l=[],u=0,c=s.length;u<c;u++){var d,h=s[u],m=o[u],f=i[u];if(m.mode===E||m.mode===R||m.mode===x||void 0===m.mode)!0!==(d=!0===a.isSkinnedMesh?new r.SkinnedMesh(h,f):new r.Mesh(h,f)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),m.mode===R?d.geometry=V(d.geometry,r.TriangleStripDrawMode):m.mode===x&&(d.geometry=V(d.geometry,r.TriangleFanDrawMode));else if(m.mode===w)d=new r.LineSegments(h,f);else if(m.mode===M)d=new r.Line(h,f);else if(m.mode===L)d=new r.LineLoop(h,f);else{if(m.mode!==y)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+m.mode);d=new r.Points(h,f)}Object.keys(d.geometry.morphAttributes).length>0&&G(d,a),d.name=a.name||"mesh_"+e,s.length>1&&(d.name+="_"+u),D(d,a),n.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var p=new r.Group;for(u=0,c=l.length;u<c;u++)p.add(l[u]);return p}))},N.prototype.loadCamera=function(e){var t,n=this.json.cameras[e],a=n[n.type];if(a)return"perspective"===n.type?t=new r.PerspectiveCamera(r.MathUtils.radToDeg(a.yfov),a.aspectRatio||1,a.znear||1,a.zfar||2e6):"orthographic"===n.type&&(t=new r.OrthographicCamera(-a.xmag,a.xmag,a.ymag,-a.ymag,a.znear,a.zfar)),n.name&&(t.name=n.name),D(t,n),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},N.prototype.loadSkin=function(e){var t=this.json.skins[e],n={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(n):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return n.inverseBindMatrices=e,n}))},N.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],n=[],a=[],o=[],i=[],s=[],l=0,u=t.channels.length;l<u;l++){var c=t.channels[l],d=t.samplers[c.sampler],h=c.target,m=void 0!==h.node?h.node:h.id,f=void 0!==t.parameters?t.parameters[d.input]:d.input,p=void 0!==t.parameters?t.parameters[d.output]:d.output;n.push(this.getDependency("node",m)),a.push(this.getDependency("accessor",f)),o.push(this.getDependency("accessor",p)),i.push(d),s.push(h)}return Promise.all([Promise.all(n),Promise.all(a),Promise.all(o),Promise.all(i),Promise.all(s)]).then((function(n){for(var a=n[0],o=n[1],i=n[2],s=n[3],l=n[4],u=[],c=0,d=a.length;c<d;c++){var h=a[c],m=o[c],f=i[c],p=s[c],g=l[c];if(void 0!==h){var v;switch(h.updateMatrix(),h.matrixAutoUpdate=!0,P[g.path]){case P.weights:v=r.NumberKeyframeTrack;break;case P.rotation:v=r.QuaternionKeyframeTrack;break;default:v=r.VectorKeyframeTrack}var y=h.name?h.name:h.uuid,w=void 0!==p.interpolation?_[p.interpolation]:r.InterpolateLinear,L=[];P[g.path]===P.weights?h.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&L.push(e.name?e.name:e.uuid)})):L.push(y);var M=f.array;if(f.normalized){var E;if(M.constructor===Int8Array)E=1/127;else if(M.constructor===Uint8Array)E=1/255;else if(M.constructor==Int16Array)E=1/32767;else{if(M.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");E=1/65535}for(var R=new Float32Array(M.length),x=0,T=M.length;x<T;x++)R[x]=M[x]*E;M=R}for(x=0,T=L.length;x<T;x++){var S=new v(L[x]+"."+P[g.path],m.array,M,w);"CUBICSPLINE"===p.interpolation&&(S.createInterpolant=function(e){return new b(this.times,this.values,this.getValueSize()/3,e)},S.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),u.push(S)}}}var A=t.name?t.name:"animation_"+e;return new r.AnimationClip(A,void 0,u)}))},N.prototype.loadNode=function(e){var t,a=this.json,o=this.extensions,i=this,s=a.meshReferences,l=a.meshUses,u=a.nodes[e];return(t=[],void 0!==u.mesh&&t.push(i.getDependency("mesh",u.mesh).then((function(e){var t;if(s[u.mesh]>1){var n=l[u.mesh]++;(t=e.clone()).name+="_instance_"+n}else t=e;return void 0!==u.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,n=u.weights.length;t<n;t++)e.morphTargetInfluences[t]=u.weights[t]})),t}))),void 0!==u.camera&&t.push(i.getDependency("camera",u.camera)),u.extensions&&u.extensions[n.KHR_LIGHTS_PUNCTUAL]&&void 0!==u.extensions[n.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",u.extensions[n.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===u.isBone?new r.Bone:e.length>1?new r.Group:1===e.length?e[0]:new r.Object3D)!==e[0])for(var n=0,a=e.length;n<a;n++)t.add(e[n]);if(u.name&&(t.userData.name=u.name,t.name=r.PropertyBinding.sanitizeNodeName(u.name)),D(t,u),u.extensions&&U(o,t,u),void 0!==u.matrix){var i=new r.Matrix4;i.fromArray(u.matrix),t.applyMatrix4(i)}else void 0!==u.translation&&t.position.fromArray(u.translation),void 0!==u.rotation&&t.quaternion.fromArray(u.rotation),void 0!==u.scale&&t.scale.fromArray(u.scale);return t}))},N.prototype.loadScene=function(){function e(t,n,a,o){var i=a.nodes[t];return o.getDependency("node",t).then((function(e){return void 0===i.skin?e:o.getDependency("skin",i.skin).then((function(e){for(var n=[],r=0,a=(t=e).joints.length;r<a;r++)n.push(o.getDependency("node",t.joints[r]));return Promise.all(n)})).then((function(n){return e.traverse((function(e){if(e.isMesh){for(var a=[],o=[],i=0,s=n.length;i<s;i++){var l=n[i];if(l){a.push(l);var u=new r.Matrix4;void 0!==t.inverseBindMatrices&&u.fromArray(t.inverseBindMatrices.array,16*i),o.push(u)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new r.Skeleton(a,o),e.matrixWorld)}})),e}));var t})).then((function(t){n.add(t);var r=[];if(i.children)for(var s=i.children,l=0,u=s.length;l<u;l++){var c=s[l];r.push(e(c,t,a,o))}return Promise.all(r)}))}return function(t){var n=this.json,a=this.extensions,o=this.json.scenes[t],i=new r.Group;o.name&&(i.name=o.name),D(i,o),o.extensions&&U(a,i,o);for(var s=o.nodes||[],l=[],u=0,c=s.length;u<c;u++)l.push(e(s[u],i,n,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var r=n("./node_modules/three/build/three.module.js"),a=n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=n("./src/js/app/components/renderer.js"),i=n("./src/js/app/components/camera.js"),s=n("./src/js/app/components/light.js"),l=n("./src/js/app/components/controls.js"),u=n("./src/js/app/components/geometry.js"),c=n("./src/js/app/helpers/stats.js"),d=n("./src/js/app/helpers/meshHelper.js"),h=n("./src/js/app/model/texture.js"),m=n("./src/js/app/flowers/Flowers.js"),f=n("./src/js/app/managers/interaction.js"),p=n("./src/js/app/managers/datGUI.js"),g=n("./src/js/data/config.js");function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new r.Clock,this.scene=new r.Scene,this.scene.fog=new r.FogExp2(g.default.fog.color,g.default.fog.near),window.devicePixelRatio&&(g.default.dpr=window.devicePixelRatio),this.renderer=new o.default(this.scene,t),this.camera=new i.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,t),this.light=new s.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return n.light.place(e)})),this.geometry=new u.default(this.scene),this.geometry.make("plane")(150,150,10,10),this.geometry.place([0,-20,0],[Math.PI/2,0,0]),g.default.isDev&&g.default.isShowingStats&&(this.stats=new c.default(this.renderer),this.stats.setUp()),g.default.isDev&&(this.gui=new p.default(this)),this.texture=new h.default,this.container.querySelector("#loading").style.display="none",this.texture.load().then((function(){n.manager=new r.LoadingManager,n.model=new m.default(n.scene),n.model.load(),n.manager.onProgress=function(e,t,n){console.log("".concat(e,": ").concat(t," ").concat(n))},new f.default(n.renderer.threeRenderer,n.scene,n.camera.threeCamera,n.controls.threeControls),g.default.isDev&&(n.meshHelper=new d.default(n.scene,n.model.obj),g.default.mesh.enableHelper&&n.meshHelper.enable(),n.gui.load(n,n.model.obj)),g.default.isLoaded=!0,n.container.querySelector("#loading").style.display="none"})),this.render()}var t,n,b;return t=e,(n=[{key:"render",value:function(){g.default.isDev&&g.default.isShowingStats&&c.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),g.default.isDev&&g.default.isShowingStats&&c.default.end(),a.default.update(),this.controls.threeControls.update(),requestAnimationFrame(this.render.bind(this))}}])&&v(t.prototype,n),b&&v(t,b),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/datGUI.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./src/js/data/config.js");function a(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.model=null,this.meshHelper=null}var t,n,o;return t=e,(n=[{key:"load",value:function(e,t){var n=this;this.model=e.model,this.meshHelper=e.meshHelper;var o=this.gui.addFolder("Camera"),i=o.add(r.default.camera,"fov",0,180).name("Camera FOV");i.onChange((function(e){n.controls.enableRotate=!1,n.camera.fov=e})),i.onFinishChange((function(){n.camera.updateProjectionMatrix(),n.controls.enableRotate=!0}));var s=o.add(r.default.camera,"aspect",0,4).name("Camera Aspect");s.onChange((function(e){n.controls.enableRotate=!1,n.camera.aspect=e})),s.onFinishChange((function(){n.camera.updateProjectionMatrix(),n.controls.enableRotate=!0})),o.addColor(r.default.fog,"color").name("Fog Color").onChange((function(e){n.scene.fog.color.setHex(e)}));var l=o.add(r.default.fog,"near",0,.01).name("Fog Near");l.onChange((function(e){n.controls.enableRotate=!1,n.scene.fog.density=e})),l.onFinishChange((function(){n.controls.enableRotate=!0}));var u=this.gui.addFolder("Controls");u.add(r.default.controls,"autoRotate").name("Auto Rotate").onChange((function(e){n.controls.autoRotate=e}));var c=u.add(r.default.controls,"autoRotateSpeed",-1,1).name("Rotation Speed");c.onChange((function(e){n.controls.enableRotate=!1,n.controls.autoRotateSpeed=e})),c.onFinishChange((function(){n.controls.enableRotate=!0})),this.gui.addFolder("Model").add(r.default.model,"type",a(r.default.model.initialTypes)).name("Select Model").onChange((function(e){e&&(r.default.mesh.enableHelper&&n.meshHelper.disable(),r.default.model.selected=r.default.model.initialTypes.indexOf(e),n.unload(),n.model.unload(),n.model.load(e))}));var d=this.gui.addFolder("Mesh");d.add(r.default.mesh,"enableHelper",!0).name("Enable Helpers").onChange((function(e){e?n.meshHelper.enable():n.meshHelper.disable()})),d.add(r.default.mesh,"translucent",!0).name("Translucent").onChange((function(e){e?(t.material.transparent=!0,t.material.opacity=.5):t.material.opacity=1})),d.add(r.default.mesh,"wireframe",!0).name("Wireframe").onChange((function(e){t.material.wireframe=e}));var h=this.gui.addFolder("Ambient Light");h.add(r.default.ambientLight,"enabled").name("Enabled").onChange((function(e){n.light.ambientLight.visible=e})),h.addColor(r.default.ambientLight,"color").name("Color").onChange((function(e){n.light.ambientLight.color.setHex(e)}));var m=this.gui.addFolder("Directional Light");m.add(r.default.directionalLight,"enabled").name("Enabled").onChange((function(e){n.light.directionalLight.visible=e})),m.addColor(r.default.directionalLight,"color").name("Color").onChange((function(e){n.light.directionalLight.color.setHex(e)}));var f=m.add(r.default.directionalLight,"intensity",0,2).name("Intensity");f.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.intensity=e})),f.onFinishChange((function(){n.controls.enableRotate=!0}));var p=m.add(r.default.directionalLight,"x",-1e3,1e3).name("Position X");p.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.x=e})),p.onFinishChange((function(){n.controls.enableRotate=!0}));var g=m.add(r.default.directionalLight,"y",-1e3,1e3).name("Position Y");g.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.y=e})),g.onFinishChange((function(){n.controls.enableRotate=!0}));var v=m.add(r.default.directionalLight,"z",-1e3,1e3).name("Position Z");v.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.z=e})),v.onFinishChange((function(){n.controls.enableRotate=!0}));var b=this.gui.addFolder("Shadow Map");b.add(r.default.shadow,"enabled").name("Enabled").onChange((function(e){n.light.directionalLight.castShadow=e})),b.add(r.default.shadow,"helperEnabled").name("Helper Enabled").onChange((function(e){n.light.directionalLightHelper.visible=e}));var y=b.add(r.default.shadow,"near",0,400).name("Near");y.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.near=e})),y.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var w=b.add(r.default.shadow,"far",0,1200).name("Far");w.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.far=e})),w.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var L=b.add(r.default.shadow,"top",-400,400).name("Top");L.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.top=e})),L.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var M=b.add(r.default.shadow,"right",-400,400).name("Right");M.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.right=e})),M.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var E=b.add(r.default.shadow,"bottom",-400,400).name("Bottom");E.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.bottom=e})),E.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var R=b.add(r.default.shadow,"left",-400,400).name("Left");R.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.left=e})),R.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var x=b.add(r.default.shadow,"bias",-1e-5,1).name("Bias");x.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.bias=e})),x.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var T=this.gui.addFolder("Point Light");T.add(r.default.pointLight,"enabled").name("Enabled").onChange((function(e){n.light.pointLight.visible=e})),T.addColor(r.default.pointLight,"color").name("Color").onChange((function(e){n.light.pointLight.color.setHex(e)}));var S=T.add(r.default.pointLight,"intensity",0,2).name("Intensity");S.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.intensity=e})),S.onFinishChange((function(){n.controls.enableRotate=!0}));var A=T.add(r.default.pointLight,"distance",0,1e3).name("Distance");A.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.distance=e})),A.onFinishChange((function(){n.controls.enableRotate=!0}));var C=T.add(r.default.pointLight,"x",-1e3,1e3).name("Position X");C.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.x=e})),C.onFinishChange((function(){n.controls.enableRotate=!0}));var j=T.add(r.default.pointLight,"y",-1e3,1e3).name("Position Y");j.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.y=e})),j.onFinishChange((function(){n.controls.enableRotate=!0}));var P=T.add(r.default.pointLight,"z",-1e3,1e3).name("Position Z");P.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.z=e})),P.onFinishChange((function(){n.controls.enableRotate=!0}));var _=this.gui.addFolder("Hemi Light");_.add(r.default.hemiLight,"enabled").name("Enabled").onChange((function(e){n.light.hemiLight.visible=e})),_.addColor(r.default.hemiLight,"color").name("Color").onChange((function(e){n.light.hemiLight.color.setHex(e)})),_.addColor(r.default.hemiLight,"groundColor").name("ground Color").onChange((function(e){n.light.hemiLight.groundColor.setHex(e)}));var O=_.add(r.default.hemiLight,"intensity",0,2).name("Intensity");O.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.intensity=e})),O.onFinishChange((function(){n.controls.enableRotate=!0}));var F=_.add(r.default.hemiLight,"x",-1e3,1e3).name("Position X");F.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.x=e})),F.onFinishChange((function(){n.controls.enableRotate=!0}));var k=_.add(r.default.hemiLight,"y",-500,1e3).name("Position Y");k.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.y=e})),k.onFinishChange((function(){n.controls.enableRotate=!0}));var I=_.add(r.default.hemiLight,"z",-1e3,1e3).name("Position Z");I.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.z=e})),I.onFinishChange((function(){n.controls.enableRotate=!0}))}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&i(t.prototype,n),o&&i(t,o),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/interaction.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./src/js/utils/keyboard.js"),a=n("./src/js/utils/helpers.js"),o=n("./src/js/data/config.js");function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t,n,o,i){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=n,this.camera=o,this.controls=i,this.timeout=null,this.keyboard=new r.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return a.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,n,s;return t=e,(n=[{key:"onMouseOver",value:function(e){e.preventDefault(),o.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),o.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){o.default.isMouseMoving=!1}),200),o.default.isMouseMoving=!0}}])&&i(t.prototype,n),s&&i(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/model/texture.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/three/build/three.module.js"),a=n("./node_modules/es6-promise/dist/es6-promise.js"),o=n("./src/js/utils/helpers.js"),i=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,n,l;return t=e,(n=[{key:"load",value:function(){var e=this,t=new r.TextureLoader,n=i.default.maxAnisotropy,s=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),s.forEach((function(e){l.push(new a.Promise((function(a,i){t.load(e.image,(function(t){t.anisotropy=n;var o={};o[e.name]=t,o[e.name]instanceof r.Texture&&a(o)}),o.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),a.Promise.all(l).then((function(t){for(var n=0;n<t.length;n++)e.textures[Object.keys(t[n])[0]]=t[n][Object.keys(t[n])[0]]}),(function(e){return console.log(e)}))}}])&&s(t.prototype,n),l&&s(t,l),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/data/config.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BufferGeometryUtils:()=>a});var r=n("./node_modules/three/build/three.module.js"),a={computeTangents:function(e){var t=e.index,n=e.attributes;if(null!==t&&void 0!==n.position&&void 0!==n.normal&&void 0!==n.uv){var a=t.array,o=n.position.array,i=n.normal.array,s=n.uv.array,l=o.length/3;void 0===n.tangent&&e.setAttribute("tangent",new r.BufferAttribute(new Float32Array(4*l),4));for(var u=n.tangent.array,c=[],d=[],h=0;h<l;h++)c[h]=new r.Vector3,d[h]=new r.Vector3;var m=new r.Vector3,f=new r.Vector3,p=new r.Vector3,g=new r.Vector2,v=new r.Vector2,b=new r.Vector2,y=new r.Vector3,w=new r.Vector3,L=e.groups;0===L.length&&(L=[{start:0,count:a.length}]);h=0;for(var M=L.length;h<M;++h)for(var E=O=(_=L[h]).start,R=O+_.count;E<R;E+=3)F(a[E+0],a[E+1],a[E+2]);var x,T,S,A=new r.Vector3,C=new r.Vector3,j=new r.Vector3,P=new r.Vector3;for(h=0,M=L.length;h<M;++h){var _,O;for(E=O=(_=L[h]).start,R=O+_.count;E<R;E+=3)k(a[E+0]),k(a[E+1]),k(a[E+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function F(e,t,n){m.fromArray(o,3*e),f.fromArray(o,3*t),p.fromArray(o,3*n),g.fromArray(s,2*e),v.fromArray(s,2*t),b.fromArray(s,2*n),f.sub(m),p.sub(m),v.sub(g),b.sub(g);var r=1/(v.x*b.y-b.x*v.y);isFinite(r)&&(y.copy(f).multiplyScalar(b.y).addScaledVector(p,-v.y).multiplyScalar(r),w.copy(p).multiplyScalar(v.x).addScaledVector(f,-b.x).multiplyScalar(r),c[e].add(y),c[t].add(y),c[n].add(y),d[e].add(w),d[t].add(w),d[n].add(w))}function k(e){j.fromArray(i,3*e),P.copy(j),T=c[e],A.copy(T),A.sub(j.multiplyScalar(j.dot(T))).normalize(),C.crossVectors(P,T),S=C.dot(d[e]),x=S<0?-1:1,u[4*e]=A.x,u[4*e+1]=A.y,u[4*e+2]=A.z,u[4*e+3]=x}},mergeBufferGeometries:function(e,t){for(var n=null!==e[0].index,a=new Set(Object.keys(e[0].attributes)),o=new Set(Object.keys(e[0].morphAttributes)),i={},s={},l=e[0].morphTargetsRelative,u=new r.BufferGeometry,c=0,d=0;d<e.length;++d){var h=e[d],m=0;if(n!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var f in h.attributes){if(!a.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+f+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[f]&&(i[f]=[]),i[f].push(h.attributes[f]),m++}if(m!==a.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in h.morphAttributes){if(!o.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[f]&&(s[f]=[]),s[f].push(h.morphAttributes[f])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(h.userData),t){var p;if(n)p=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;p=h.attributes.position.count}u.addGroup(c,p,d),c+=p}}if(n){var g=0,v=[];for(d=0;d<e.length;++d){for(var b=e[d].index,y=0;y<b.count;++y)v.push(b.getX(y)+g);g+=e[d].attributes.position.count}u.setIndex(v)}for(var f in i){var w=this.mergeBufferAttributes(i[f]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" attribute."),null;u.setAttribute(f,w)}for(var f in s){var L=s[f][0].length;if(0===L)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[f]=[];for(d=0;d<L;++d){var M=[];for(y=0;y<s[f].length;++y)M.push(s[f][y][d]);var E=this.mergeBufferAttributes(M);if(!E)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" morphAttribute."),null;u.morphAttributes[f].push(E)}}return u},mergeBufferAttributes:function(e){for(var t,n,a,o=0,i=0;i<e.length;++i){var s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===n&&(n=s.itemSize),n!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===a&&(a=s.normalized),a!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;o+=s.array.length}var l=new t(o),u=0;for(i=0;i<e.length;++i)l.set(e[i].array,u),u+=e[i].array.length;return new r.BufferAttribute(l,n,a)},interleaveAttributes:function(e){for(var t,n=0,a=0,o=0,i=e.length;o<i;++o){var s=e[o];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;n+=s.array.length,a+=s.itemSize}var l=new r.InterleavedBuffer(new t(n),a),u=0,c=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],m=0;for(i=e.length;m<i;m++){var f=(s=e[m]).itemSize,p=s.count,g=new r.InterleavedBufferAttribute(l,f,u,s.normalized);c.push(g),u+=f;for(var v=0;v<p;v++)for(var b=0;b<f;b++)g[h[b]](v,s[d[b]](v))}return c},estimateBytesUsed:function(e){var t=0;for(var n in e.attributes){var r=e.getAttribute(n);t+=r.count*r.itemSize*r.array.BYTES_PER_ELEMENT}var a=e.getIndex();return t+=a?a.count*a.itemSize*a.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var n={},a=e.getIndex(),o=e.getAttribute("position"),i=a?a.count:o.count,s=0,l=Object.keys(e.attributes),u={},c={},d=[],h=["getX","getY","getZ","getW"],m=0,f=l.length;m<f;m++){u[w=l[m]]=[],(R=e.morphAttributes[w])&&(c[w]=new Array(R.length).fill().map((function(){return[]})))}var p=Math.log10(1/t),g=Math.pow(10,p);for(m=0;m<i;m++){var v=a?a.getX(m):m,b="",y=0;for(f=l.length;y<f;y++)for(var w=l[y],L=(E=e.getAttribute(w)).itemSize,M=0;M<L;M++)b+="".concat(~~(E[h[M]](v)*g),",");if(b in n)d.push(n[b]);else{for(y=0,f=l.length;y<f;y++){w=l[y];var E=e.getAttribute(w),R=e.morphAttributes[w],x=(L=E.itemSize,u[w]),T=c[w];for(M=0;M<L;M++){var S=h[M];if(x.push(E[S](v)),R)for(var A=0,C=R.length;A<C;A++)T[A].push(R[A][S](v))}}n[b]=s,d.push(s),s++}}var j=e.clone();for(m=0,f=l.length;m<f;m++){w=l[m];var P=e.getAttribute(w),_=new P.array.constructor(u[w]);E=new r.BufferAttribute(_,P.itemSize,P.normalized);if(j.setAttribute(w,E),w in c)for(y=0;y<c[w].length;y++){var O=e.morphAttributes[w][y],F=(_=new O.array.constructor(c[w][y]),new r.BufferAttribute(_,O.itemSize,O.normalized));j.morphAttributes[w][y]=F}}return j.setIndex(d),j},toTrianglesDrawMode:function(e,t){if(t===r.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===r.TriangleFanDrawMode||t===r.TriangleStripDrawMode){var n=e.getIndex();if(null===n){var a=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<o.count;i++)a.push(i);e.setIndex(a),n=e.getIndex()}var s=n.count-2,l=[];if(t===r.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,n,r;t=void 0!==(e=e||{}).parent?e.parent:document.body,n=void 0!==e.id?e.id:"oldie",(r=this.getWebGLErrorMessage()).id=n,t.appendChild(r)}}},"./src/js/utils/helpers.js":(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n.r(t),n.d(t,{default:()=>a});var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,a;return t=e,a=[{key:"throttle",value:function(e,t,n){var r,a;return t||(t=250),function(){var o=n||this,i=+new Date,s=arguments;r&&i<r+t?(clearTimeout(a),a=setTimeout((function(){r=i,e.apply(o,s)}),t)):(r=i,e.apply(o,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,n){return function(r){e[t]=n[r],e.needsUpdate=!0}}}],(n=null)&&r(t.prototype,n),a&&r(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/utils/keyboard.js":(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n.r(t),n.d(t,{default:()=>o});var a={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},o=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return n.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return n.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return n.onBlur}),!1)}var t,n,o;return t=e,(n=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),n=0;n<t.length;n++){var r=t[n],o=!1;if(o=-1!=Object.keys(a).indexOf(r)?this.keyCodes[a[r]]:this.keyCodes[r.toUpperCase().charCodeAt(0)],!o)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var n=a,r=Object.keys(n),o=t.split("+"),i=0;i<o.length;i++){var s=o[i],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==r.indexOf(s)?l=e.keyCode===n[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&r(t.prototype,n),o&&r(t,o),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function n(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var n,r,a,o,i,s,l,u,c=this,d=1e-6,h=0,m=0,f=1,p=new e.Vector3,g=!1;this.getPolarAngle=function(){return r},this.getAzimuthalAngle=function(){return n},this.rotateLeft=function(e){m-=e},this.rotateUp=function(e){h-=e},this.panLeft=(a=new e.Vector3,function(e){var t=this.object.matrix.elements;a.set(t[0],t[1],t[2]),a.multiplyScalar(-e),p.add(a)}),this.panUp=function(){var t=new e.Vector3;return function(e){var n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),p.add(t)}}(),this.pan=function(t,n,r,a){if(c.object instanceof e.PerspectiveCamera){var o=c.object.position.clone().sub(c.target).length();o*=Math.tan(c.object.fov/2*Math.PI/180),c.panLeft(2*t*o/a),c.panUp(2*n*o/a)}else c.object instanceof e.OrthographicCamera?(c.panLeft(t*(c.object.right-c.object.left)/r),c.panUp(n*(c.object.top-c.object.bottom)/a)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){c.object instanceof e.PerspectiveCamera?f/=t:c.object instanceof e.OrthographicCamera?(c.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),c.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){c.object instanceof e.PerspectiveCamera?f*=t:c.object instanceof e.OrthographicCamera?(c.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),c.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(o=new e.Vector3,i=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),s=i.clone().inverse(),l=new e.Vector3,u=new e.Quaternion,function(){var e=this.object.position;o.copy(e).sub(this.target),o.applyQuaternion(i),n=Math.atan2(o.x,o.z),r=Math.atan2(Math.sqrt(o.x*o.x+o.z*o.z),o.y),n+=m,r+=h,n=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,n)),r=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,r)),r=Math.max(d,Math.min(Math.PI-d,r));var t=o.length()*f;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(p),o.x=t*Math.sin(r)*Math.sin(n),o.y=t*Math.cos(r),o.z=t*Math.sin(r)*Math.cos(n),o.applyQuaternion(s),e.copy(this.target).add(o),this.object.lookAt(this.target),!0===this.enableDamping?(m*=1-this.dampingFactor,h*=1-this.dampingFactor):(m=0,h=0),f=1,p.set(0,0,0),!!(g||l.distanceToSquared(this.object.position)>d||8*(1-u.dot(this.object.quaternion))>d)&&(l.copy(this.object.position),u.copy(this.object.quaternion),g=!1,!0)})}function r(t,r){var a=new n(t);this.domElement=void 0!==r?r:document,Object.defineProperty(this,"constraint",{get:function(){return a}}),this.getPolarAngle=function(){return a.getPolarAngle()},this.getAzimuthalAngle=function(){return a.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var o=this,i=new e.Vector2,s=new e.Vector2,l=new e.Vector2,u=new e.Vector2,c=new e.Vector2,d=new e.Vector2,h=new e.Vector2,m=new e.Vector2,f=new e.Vector2,p=-1,g=0,v=1,b=2,y=3,w=4,L=5,M=p;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var E={type:"change"},R={type:"start"},x={type:"end"};function T(e,t){var n=o.domElement===document?o.domElement.body:o.domElement;a.pan(e,t,n.clientWidth,n.clientHeight)}function S(){return Math.pow(.95,o.zoomSpeed)}function A(e){if(!1!==o.enabled){if(e.preventDefault(),e.button===o.mouseButtons.ORBIT){if(!1===o.enableRotate)return;M=g,i.set(e.clientX,e.clientY)}else if(e.button===o.mouseButtons.ZOOM){if(!1===o.enableZoom)return;M=v,h.set(e.clientX,e.clientY)}else if(e.button===o.mouseButtons.PAN){if(!1===o.enablePan)return;M=b,u.set(e.clientX,e.clientY)}M!==p&&(document.addEventListener("mousemove",C,!1),document.addEventListener("mouseup",j,!1),o.dispatchEvent(R))}}function C(e){if(!1!==o.enabled){e.preventDefault();var t=o.domElement===document?o.domElement.body:o.domElement;if(M===g){if(!1===o.enableRotate)return;s.set(e.clientX,e.clientY),l.subVectors(s,i),a.rotateLeft(2*Math.PI*l.x/t.clientWidth*o.rotateSpeed),a.rotateUp(2*Math.PI*l.y/t.clientHeight*o.rotateSpeed),i.copy(s)}else if(M===v){if(!1===o.enableZoom)return;m.set(e.clientX,e.clientY),f.subVectors(m,h),f.y>0?a.dollyIn(S()):f.y<0&&a.dollyOut(S()),h.copy(m)}else if(M===b){if(!1===o.enablePan)return;c.set(e.clientX,e.clientY),d.subVectors(c,u),T(d.x,d.y),u.copy(c)}M!==p&&o.update()}}function j(){!1!==o.enabled&&(document.removeEventListener("mousemove",C,!1),document.removeEventListener("mouseup",j,!1),o.dispatchEvent(x),M=p)}function P(e){if(!1!==o.enabled&&!1!==o.enableZoom&&M===p){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?a.dollyOut(S()):t<0&&a.dollyIn(S()),o.update(),o.dispatchEvent(R),o.dispatchEvent(x)}}function _(e){if(!1!==o.enabled&&!1!==o.enableKeys&&!1!==o.enablePan)switch(e.keyCode){case o.keys.UP:T(0,o.keyPanSpeed),o.update();break;case o.keys.BOTTOM:T(0,-o.keyPanSpeed),o.update();break;case o.keys.LEFT:T(o.keyPanSpeed,0),o.update();break;case o.keys.RIGHT:T(-o.keyPanSpeed,0),o.update()}}function O(e){if(!1!==o.enabled){switch(e.touches.length){case 1:if(!1===o.enableRotate)return;M=y,i.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===o.enableZoom)return;M=w;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,r=Math.sqrt(t*t+n*n);h.set(0,r);break;case 3:if(!1===o.enablePan)return;M=L,u.set(e.touches[0].pageX,e.touches[0].pageY);break;default:M=p}M!==p&&o.dispatchEvent(R)}}function F(e){if(!1!==o.enabled){e.preventDefault(),e.stopPropagation();var t=o.domElement===document?o.domElement.body:o.domElement;switch(e.touches.length){case 1:if(!1===o.enableRotate)return;if(M!==y)return;s.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(s,i),a.rotateLeft(2*Math.PI*l.x/t.clientWidth*o.rotateSpeed),a.rotateUp(2*Math.PI*l.y/t.clientHeight*o.rotateSpeed),i.copy(s),o.update();break;case 2:if(!1===o.enableZoom)return;if(M!==w)return;var n=e.touches[0].pageX-e.touches[1].pageX,r=e.touches[0].pageY-e.touches[1].pageY,g=Math.sqrt(n*n+r*r);m.set(0,g),f.subVectors(m,h),f.y>0?a.dollyOut(S()):f.y<0&&a.dollyIn(S()),h.copy(m),o.update();break;case 3:if(!1===o.enablePan)return;if(M!==L)return;c.set(e.touches[0].pageX,e.touches[0].pageY),d.subVectors(c,u),T(d.x,d.y),u.copy(c),o.update();break;default:M=p}}}function k(){!1!==o.enabled&&(o.dispatchEvent(x),M=p)}function I(e){e.preventDefault()}this.update=function(){this.autoRotate&&M===p&&a.rotateLeft(2*Math.PI/60/60*o.autoRotateSpeed),!0===a.update()&&this.dispatchEvent(E)},this.reset=function(){M=p,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(E),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",I,!1),this.domElement.removeEventListener("mousedown",A,!1),this.domElement.removeEventListener("mousewheel",P,!1),this.domElement.removeEventListener("MozMousePixelScroll",P,!1),this.domElement.removeEventListener("touchstart",O,!1),this.domElement.removeEventListener("touchend",k,!1),this.domElement.removeEventListener("touchmove",F,!1),document.removeEventListener("mousemove",C,!1),document.removeEventListener("mouseup",j,!1),window.removeEventListener("keydown",_,!1)},this.domElement.addEventListener("contextmenu",I,!1),this.domElement.addEventListener("mousedown",A,!1),this.domElement.addEventListener("mousewheel",P,!1),this.domElement.addEventListener("MozMousePixelScroll",P,!1),this.domElement.addEventListener("touchstart",O,!1),this.domElement.addEventListener("touchend",k,!1),this.domElement.addEventListener("touchmove",F,!1),window.addEventListener("keydown",_,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),r.prototype=Object.create(e.EventDispatcher.prototype),r.prototype.constructor=r,Object.defineProperties(r.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),r}},"./src/css/app.scss":(e,t,n)=>{"use strict";n.r(t)},"?d4c0":()=>{}},e=>{e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,